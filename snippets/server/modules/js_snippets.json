{
  "@prisma-cms Module": {
    "prefix": "@prisma-cms Module",
    "body": [
      "",
      "import PrismaModule from \"@prisma-cms/prisma-module\";",
      "import PrismaProcessor from \"@prisma-cms/prisma-processor\";",
      "",
      "",
      "export class ${1:${TM_DIRECTORY/^.+\\/(.*)$/$1/}}Processor extends PrismaProcessor {",
      "",
      "  constructor(props) {",
      "",
      "    super(props);",
      "",
      "    this.objectType = \"${1}\";",
      "  }",
      "",
      "",
      "  async create(method, args, info) {",
      "",
      "    if(args.data) {",
      "",
      "      let {",
      "        ...data",
      "      } = args.data;",
      "",
      "      args.data = data;",
      "",
      "    }",
      "",
      "    return super.create(method, args, info);",
      "  }",
      "",
      "",
      "  async update(method, args, info) {",
      "",
      "    if(args.data) {",
      "",
      "      let {",
      "        ...data",
      "      } = args.data;",
      "",
      "      args.data = data;",
      "",
      "    }",
      "",
      "    return super.update(method, args, info);",
      "  }",
      "",
      "",
      "  async mutate(method, args, info) {",
      "",
      "    if(args.data) {",
      "",
      "      let {",
      "        ...data",
      "      } = args.data;",
      "",
      "      args.data = data;",
      "",
      "    }",
      "",
      "    return super.mutate(method, args);",
      "  }",
      "",
      "",
      "",
      "  async delete(method, args, info) {",
      "",
      "    return super.delete(method, args);",
      "  }",
      "}",
      "",
      "",
      "export default class ${1}Module extends PrismaModule {",
      "",
      "  constructor(props = {}) {",
      "",
      "    super(props);",
      "",
      "    this.mergeModules([",
      "    ]);",
      "",
      "  }",
      "",
      "",
      "  getProcessor(ctx) {",
      "    return new (this.getProcessorClass())(ctx);",
      "  }",
      "",
      "",
      "  getProcessorClass() {",
      "    return ${1}Processor;",
      "  }",
      "",
      "",
      "  getResolvers() {",
      "",
      "    const {",
      "      Query: {",
      "        ...Query",
      "      },",
      "      Subscription: {",
      "        ...Subscription",
      "      },",
      "      Mutation: {",
      "        ...Mutation",
      "      },",
      "      ...other",
      "    } = super.getResolvers();",
      "",
      "    return {",
      "      ...other,",
      "      Query: {",
      "        ...Query,",
      "        ${2:${TM_DIRECTORY/^.+\\/(.)(.*)$/${1:/downcase}${2}/}}: (source, args, ctx, info) => {",
      "          return ctx.db.query.${2}(args, info);",
      "        },",
      "        ${2}s: (source, args, ctx, info) => {",
      "          return ctx.db.query.${2}s(args, info);",
      "        },",
      "        ${2}sConnection: (source, args, ctx, info) => {",
      "          return ctx.db.query.${2}sConnection(args, info);",
      "        },",
      "      },",
      "      Mutation: {",
      "        ...Mutation,",
      "        create${1}Processor: (source, args, ctx, info) => {",
      "          return this.getProcessor(ctx).createWithResponse(\"${1}\", args, info);",
      "        },",
      "        update${1}Processor: (source, args, ctx, info) => {",
      "          return this.getProcessor(ctx).updateWithResponse(\"${1}\", args, info);",
      "        },",
      "        delete${1}: (source, args, ctx, info) => {",
      "          return this.getProcessor(ctx).delete(\"${1}\", args, info);",
      "        },",
      "      },",
      "      Subscription: {",
      "        ...Subscription,",
      "        ${2}: {",
      "          subscribe: async (parent, args, ctx, info) => {",
      "",
      "            return ctx.db.subscription.${2}({}, info);",
      "          },",
      "        },",
      "      },",
      "      ${1}Response: {",
      "        data: (source, args, ctx, info) => {",
      "",
      "          const {",
      "            id,",
      "          } = source.data || {};",
      "",
      "          return id ? ctx.db.query.${2}({",
      "            where: {",
      "              id,",
      "            },",
      "          }, info) : null;",
      "        },",
      "      },",
      "    }",
      "",
      "  }",
      "",
      "}"
    ],
    "description": "Create @prisma-cms Module"
  }
}